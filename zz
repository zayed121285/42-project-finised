#include "get_next_line.h"

int	get_check(char	*str)
{
	int i;

	i = 0;
	while (str[i])
	{
		if (str[i] == '\n')
			return (1);
		i++;
	}
	return (0);
}

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	if (!str)
		return (0);
	while (str[i])
		i++;
	return (i);
}

char	*get_calloc(int size)
{
	int		i;
	char	*ret;

	i = 0;
	ret = malloc(size);
	while (i < size)
	{
		ret[i] = '\0';
		i++;
	}
	return (ret);
}

char	*get_join_extra(char *s1, char *s2, int sl1, int sl2)
{
	int		i;
	int		j;
	char	*ret;

	i = 0;
	j = 0;
	ret = get_calloc(sl1 + sl2);
	if (!ret)
		return (NULL);
	while (sl1 > i)
	{
		ret[i] = s1[i];
		i++;
	}
	while (sl2 > j)
	{
		ret[i + j] = s2[j];
		j++;
	}
	return (ret);
}

char	*get_join(char	*s1, char *s2)
{
	int		sl1;
	int		sl2;
	char	*ret;

	sl1 = 0;
	sl2 = 0;
	sl1 = ft_strlen(s1);
	sl2 = ft_strlen(s2);
	ret = get_join_extra(s1, s2, sl1, sl2);
	return (ret);
}

int	get_ready_first(char **ret, char **keep, int fd)
{
	int	flag;

	flag = 1;
	*ret = get_calloc(BUFFER_SIZE + 1);
	if (!*ret)
		return (0);
	*keep = get_calloc(BUFFER_SIZE + 1);
	if (!*keep)
	{
		free(*ret);
		return (0);
	}
	if (read(fd, *ret, BUFFER_SIZE) <= 0)
	{
		free(*ret);
		free(*keep);
		return (0);
	}
	return (1);
}

void	get_line_ready(char	**ret, char	**keep, int fd)
{
	int	flag;
	int	bytes;

	flag = get_check(*ret);
	bytes = 1;
	while (flag == 0 && bytes > 0)
	{
		bytes = read(fd, *keep, BUFFER_SIZE);
		*ret = get_join(*ret, *keep);
		flag = get_check(*ret);
	}
}

char	*ft_strchr(char	*str, char c)
{
	int		i;
	int		j;
	char	*ret;

	i = 0;
	j = 0;
	while (str[i] && str[i] != c)
		i++;
	ret = get_calloc(i);
	if (!ret)
		return (NULL);
	while (j <= i)
	{
		ret[j] = str[j];
		j++;
	}
	return (ret);
}

char	*get_keep(char *keep)
{
	char	*ret;
	char	*freed;
	int		i;
	int		j;

	j = 0;
	ret = get_calloc(BUFFER_SIZE + 1);
	if (!ret)
		return (NULL);
	i = 0;
	while (keep[i] != '\n' && keep[i])
		i++;
	if (keep[i] == '\n' && keep[i + 1] == '\0')
	{
		free(keep);
		return (NULL);
	}
	while (keep[i + j] != '\n' && keep[i + j])
	{
		ret[j] = keep[i + j];
		j++;
	}
	freed = keep;
	keep = ret;
	free(freed);
	return (keep);
}

char	*get_next_line(int fd)
{
	char		*ret;
	static char	*keep;
	char		*freed;
	int			flag;

	if (fd < 0 || (read(fd, 0, 0) < 0))
		return (NULL);
	flag = 1;
	if (keep)
		ret = get_join(keep, NULL);
	else
		flag = get_ready_first(&ret, &keep, fd);
	if (flag == 0 || !ret)
	{
		free(keep);
		return (NULL);
	}
	get_line_ready(&ret, &keep, fd);
	freed = ret;
	ret = ft_strchr(ret, '\n');
	// keep = get_keep(keep);
	free(freed);
	return (ret);
}
