#include "get_next_line.h"

// char	*get_calloc(int size)
// {
// 	int		i;
// 	char	*ret;

// 	i = 0;
// 	ret = malloc(size);
// 	if (!ret)
// 		return (NULL);
// 	while (i < size)
// 	{
// 		ret[i] = '\0';
// 		i++;
// 	}
// 	return (ret);
// }

// void	small_void(char	*str, int key)
// {
// 	int	i;

// 	if (key == 1)
// 	{
// 		i = 0;
// 		if (!*str)
// 			return ;
// 		while (str[i])
// 		{
// 			str[i] = '\0';
// 			i++;
// 		}
// 		return ;
// 	}
// 	if (key == 2)
// 	{
// 		if (!str)
// 		{
// 			str = NULL;
// 			return ;
// 		}
// 		free(str);
// 		str = NULL;
// 	}
// 	return ;
// }

// int	small(char *str, int key)
// {
// 	int	i;

// 	i = 0;
// 	if (key == 1)
// 	{
// 		if (!str)
// 			return (0);
// 		while (str[i])
// 			i++;
// 		return (i);
// 	}
// 	if (key == 2)
// 	{
// 		if (!str)
// 			return (0);
// 		while (str[i])
// 		{
// 			if (str[i] == '\n')
// 				return (1);
// 			i++;
// 		}
// 		return (0);
// 	}
// 	return (0);
// }

// char	*get_join(char	*s1, char *s2)
// {
// 	int		sl1;
// 	int		sl2;
// 	char	*ret;
// 	int		i;
// 	int		j;

// 	i = 0;
// 	j = 0;
// 	sl1 = small(s1, 1);
// 	sl2 = small(s2, 1);
// 	ret = get_calloc(sl1 + sl2 + 1);
// 	if (!ret)
// 		return (NULL);
// 	while (sl1 > i)
// 	{
// 		ret[i] = s1[i];
// 		i++;
// 	}
// 	while (sl2 > j)
// 	{
// 		ret[i + j] = s2[j];
// 		j++;
// 	}
// 	ret[i + j] = '\0';
// 	return (ret);
// }

char	*get_newline(char *keep, int fd, int bytes)
{
	char	*ret;
	char	*freed;

	ret = get_join(keep, NULL);
	if (small(ret, 2) == 1)
		return (small_void(keep, 2), ret);
	freed = ret;
	small_void(keep, 1);
	while (small(ret, 2) == 0 && bytes > 0)
	{
		bytes = read(fd, keep, BUFFER_SIZE);
		if (bytes <= 0)
			return (small_void(keep, 2), ret);
		ret = get_join(ret, keep);
		if (!ret)
			return (small_void(ret, 2), small_void(keep, 2), NULL);
		small_void(keep, 1);
		small_void(freed, 2);
		freed = ret;
	}
	// small_void(keep, 2);
	return (ret);
}

char	*get_the_keep(char	*ret, int i, int len)
{
	int		j;
	char	*keep;

	j = 0;
	while (ret[i] && ret[i] != '\n')
		i++;
	i++;
	keep = get_calloc(len + 1);
	if (!keep)
		return (NULL);
	while (ret[i])
	{
		keep[j] = ret[i];
		i++;
		j++;
	}
	keep[j] = '\0';
	return (keep);
}

char	*get_keep(char	*ret)
{
	int		i;
	int		len;
	char	*keep;

	i = 0;
	len = 0;
	while (ret[i] && ret[i] != '\n')
		i++;
	if (ret[i] != '\n')
		return (NULL);
	if (ret[i] == '\n' && ret[i + 1] == '\0')
		return (NULL);
	i++;
	while (ret[i])
	{
		i++;
		len++;
	}
	i = 0;
	ret = get_the_keep(ret, i, len);
	return (ret);
}

char	*ft_strchr(char	*str, char c)
{
	int		i;
	int		j;
	char	*ret;

	if (!str)
		return (NULL);
	i = 0;
	j = 0;
	while (str[i] && str[i] != c)
		i++;
	ret = get_calloc(i + 1 + 1);
	if (!ret)
		return (NULL);
	while (j <= i)
	{
		ret[j] = str[j];
		j++;
	}
	ret[j] = '\0';
	return (ret);
}

char	*get_next_line(int fd)
{
	static char	*keep;
	char		*ret;
	char		*line;
	int			bytes;

	bytes = 0;
	if (fd < 0 || read(fd, 0, 0) < 0 || BUFFER_SIZE == 0)
		return (NULL);
	if (!keep)
	{
		keep = get_calloc(BUFFER_SIZE + 1);
		if (!keep)
			return (NULL);
		bytes = read(fd, keep, BUFFER_SIZE);
		if (bytes <= 0)
			return (small_void(keep, 2), NULL);
	}
	ret = get_newline(keep, fd, bytes);
	// if (small(ret, 2) == 0)
	// 	str_cpy; 
	keep = get_keep(ret);
	line = ft_strchr(ret, '\n');
	small_void(ret, 2);
	return (line);
}


int	main()
{
	char 	*str;
	int fd;
	fd = open("f.txt", O_RDWR, 0666);
	while ((str = get_next_line(fd)) != NULL)
	{
		printf("--%s\n", str);
		free(str);
	}
	close(fd);
	return (0);
}
